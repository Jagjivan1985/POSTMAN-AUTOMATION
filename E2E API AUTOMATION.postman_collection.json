{
	"info": {
		"_postman_id": "7babafe5-b354-4add-a794-fd8c37c01bf8",
		"name": "E2E API AUTOMATION",
		"description": "CREATE A USER (POST) -> VERIFY IF USER IS CREATED (GET) ->UPDATE THIS USER (PATCH)-> VERIFY IF CREATED USER IS UPDATED (GET)-> DELETE THIS CREATED USER (DELETE)->VERIFY IF CREATED USER IS DELETED (GET).",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18446898"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for successful creation\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    const status = pm.response.code;\r",
									"    pm.expect(status).to.equal(201);\r",
									"    console.log(\"Status code is: \" + status);\r",
									"});\r",
									"\r",
									"// Verify response time is less than 300ms\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    const responseTime = pm.response.responseTime;\r",
									"    pm.expect(responseTime).to.be.below(5000);\r",
									"    console.log(\"Response time is: \" + responseTime + \"ms\");\r",
									"});\r",
									"\r",
									"// Verify Content-Type is application/json\r",
									"pm.test(\"Verify Content-Type is application/json\", function () {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.include(\"application/json\");\r",
									"    console.log(\"Content-Type is: \" + contentType);\r",
									"});\r",
									"\r",
									"// Validate response body contains required fields\r",
									"pm.test(\"Response body has required fields [id, name, email, gender, status]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.all.keys(\"id\", \"name\", \"email\", \"gender\", \"status\");\r",
									"    console.log(\"Response body has required fields\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    };\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    const isValid = tv4.validate(response, schema);\r",
									"    pm.expect(isValid).to.be.true;\r",
									"    console.log(\"Schema validation result: \" + isValid);\r",
									"});\r",
									"\r",
									"// Function to validate email format\r",
									"function validateEmail(email) {\r",
									"    pm.test(\"Email is in a proper format\", function () {\r",
									"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Basic email regex\r",
									"        const isValidEmail = emailRegex.test(email);\r",
									"        pm.expect(isValidEmail).to.be.true;\r",
									"        console.log(\"Email format is valid: \" + isValidEmail);\r",
									"    });\r",
									"}\r",
									"\r",
									"// Function to validate gender field\r",
									"function checkGender(gender) {\r",
									"    pm.test(\"Gender field is Male or Female\", function () {\r",
									"        pm.expect(gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"        console.log(\"Gender is valid: \" + gender);\r",
									"    });\r",
									"}\r",
									"\r",
									"const response = pm.response.json();\r",
									"validateEmail(response.email);\r",
									"checkGender(response.gender);\r",
									"\r",
									"pm.test(\"Verify status is active or inactive\", function () {\r",
									"    const status = response.status;\r",
									"    pm.expect(status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"    console.log(\"Status is valid: \" + status);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the body in JSON format\", function () {\r",
									"    const isJson = pm.response.to.have.jsonBody;\r",
									"    pm.expect(isJson).to.be.true;\r",
									"    console.log(\"Response body is in JSON format\");\r",
									"});\r",
									"\r",
									"// API CHAINING \r",
									"var JSONBODY = pm.response.json();\r",
									"var ExtractedID = JSONBODY.id;\r",
									"var ExtractedName = JSONBODY.name;\r",
									"var ExtractedEmail = JSONBODY.email;\r",
									"\r",
									"pm.globals.set(\"globalID\", ExtractedID);\r",
									"pm.globals.set(\"globalname\", ExtractedName);\r",
									"pm.globals.set(\"globalEmail\", ExtractedEmail);\r",
									"\r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"if (pm.response.code == 201) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF USER IS CREATED\")\r",
									"    \r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName + \" API has Failed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Create a collection vatible\r",
									"\r",
									"pm.environment.set(\"QAProtocol\", \"https\");\r",
									"pm.environment.set(\"QAURL\", \"gorest.co.in\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFirstName}}\",\r\n    \"gender\": \"male\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF USER IS CREATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the token error and removed unnecessary test\r",
									"pm.test(\"Status code is 200 OK \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Response body as  string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has the fields [id, name, email, gender, status]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Add a test to check if the schema is valid\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"var response = pm.response.json(); // Define response to fix the ReferenceError\r",
									"var actualSize = response.length; // Define actualSize to fix the ReferenceError\r",
									"console.log(\"Actual Size:\", actualSize);\r",
									"\r",
									"//Capturing the response code attribute \r",
									"console.log(\"The server response code is \"+ pm.response.code );\r",
									"console.log(\"The server response message received form server  is \"+ pm.response.status );\r",
									"console.log(\"Response time from Server \" + pm.response.responseTime + \"ms\" );\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"Response body received from Server: \", pm.response.json());\r",
									"\r",
									"console.log(\"The Response header received from server\" + pm.response.headers)\r",
									"\r",
									"\r",
									"pm.test(\"Verify User is created or not with ID=\" + pm.globals.get(\"globalID\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].id).to.eql(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"UPDATE THIS CREATED USER\")\r",
									"    \r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName + \" API has Failed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UPDATE THIS CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"\r",
									"\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify if the gender is male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"    pm.expect(jsonData.name).to.eql(\"jivan\");\r",
									"});\r",
									"\r",
									"pm.test.skip(\"Verify the email iD\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"jivan@postman.com\");\r",
									"});\r",
									"\r",
									"console.log(\"The HTTP method used in this API ->  \" + pm.request.method )\r",
									"console.log(\"The  URL used in this API \" + pm.request.url )\r",
									"console.log(\"The  json data received from server \" + pm.request.headers)\r",
									"console.log(\"The  request body received from server \" )\r",
									"console.log(pm.request.body)\r",
									"console.log(\"The API Name is \" + pm.info.requestName)\r",
									"\r",
									"\r",
									"pm.request.removeHeader (\"Token\");\r",
									"console.log(\"After removed the header response has below \" + pm.request.headers)\r",
									"\r",
									"//API CHAINING \r",
									"//VERIFY IF USER IS CREATED\r",
									"\r",
									"var JSONBODY= pm.response.json();\r",
									"var ExtractedID=JSONBODY.id;\r",
									"var UpdateExtractedName=JSONBODY.name;\r",
									"pm.globals.set(\"globalupdatename\", UpdateExtractedName);\r",
									" \r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF CREATED USER IS UPDATED\")\r",
									"    \r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName + \" API has Failed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									" \r",
									"\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Token\",\r",
									"    value: \"007\"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomNamePrefix}} {{globalname}} \",\r\n    \"email\": \"{{globalEmail}}\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF CREATED USER IS UPDATED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the token error and removed unnecessary test\r",
									"pm.test(\"Status code is 200 OK \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Response body as  string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has the fields [id, name, email, gender, status]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Add a test to check if the schema is valid\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"var response = pm.response.json(); // Define response to fix the ReferenceError\r",
									"var actualSize = response.length; // Define actualSize to fix the ReferenceError\r",
									"console.log(\"Actual Size:\", actualSize);\r",
									"\r",
									"//Capturing the response code attribute \r",
									"console.log(\"The server response code is \"+ pm.response.code );\r",
									"console.log(\"The server response message received form server  is \"+ pm.response.status );\r",
									"console.log(\"Response time from Server \" + pm.response.responseTime + \"ms\" );\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"Response body received from Server: \", pm.response.json());\r",
									"\r",
									"console.log(\"The Response header received from server\" + pm.response.headers)\r",
									"\r",
									"//Verfiy if cretaed used updated\r",
									"\r",
									"pm.test(\"Verify if created User is updated or not with Name=\" + pm.globals.get(\"globalupdatename\"), function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[0].name).to.eql(pm.globals.get(\"globalupdatename\"));\r",
									"});\r",
									"\r",
									"\r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"DELETE THIS CREATED USER\");\r",
									"} else {\r",
									"    console.log(pm.info.requestName + \" API has failed.\");\r",
									"    pm.execution.setNextRequest(\"\"); // This effectively skips the next request\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE THIS CREATED USER",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\")\r",
									"\r",
									"});\r",
									"\r",
									"// Additional assertions can be added based on your requirements\r",
									"pm.test(\"Email creation successful\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty; // Ensure there's no response content\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from Server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\" Server Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"\r",
									"if (pm.response.code == 204) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"VERIFY IF CREATED USER DELETED OR NOT\")\r",
									"    \r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName + \" API has Failed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{globalID}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{globalID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "VERIFY IF CREATED USER DELETED OR NOT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the token error and removed unnecessary test\r",
									"pm.test(\"Status code is 200 OK \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Response body as  string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has the fields [id, name, email, gender, status]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Add a test to check if the schema is valid\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"var response = pm.response.json(); // Define response to fix the ReferenceError\r",
									"var actualSize = response.length; // Define actualSize to fix the ReferenceError\r",
									"console.log(\"Actual Size:\", actualSize);\r",
									"\r",
									"//Capturing the response code attribute \r",
									"console.log(\"The server response code is \"+ pm.response.code );\r",
									"console.log(\"The server response message received form server  is \"+ pm.response.status );\r",
									"console.log(\"Response time from Server \" + pm.response.responseTime + \"ms\" );\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"Response body received from Server: \", pm.response.json());\r",
									"\r",
									"console.log(\"The Response header received from server\" + pm.response.headers)\r",
									"\r",
									"//VERIFY IF CREATED USED IS DELETED\r",
									"\r",
									"pm.test(\"Verify if created user is deleted with ID =\"+ pm.globals.get(\"globalID\"), function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(pm.globals.get(\"globalID\"));\r",
									"});\r",
									"\r",
									"// CONDITIONAL STATEMENTS AND POSTMAN WORKFLOW\r",
									"\r",
									"if (pm.response.code == 200) {\r",
									"    console.log(pm.info.requestName + \" has passed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"    \r",
									"}\r",
									"else {\r",
									"    console.log(pm.info.requestName + \" API has Failed.\");\r",
									"    pm.execution.setNextRequest(\"\")\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{gAccessToken}}"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}