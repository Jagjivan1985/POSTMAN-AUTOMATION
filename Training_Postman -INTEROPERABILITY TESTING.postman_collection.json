{
	"info": {
		"_postman_id": "b262869a-fedc-4c63-888a-2b586729306f",
		"name": "Training_Postman -INTEROPERABILITY TESTING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18446898"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "ListUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed the token error and removed unnecessary test\r",
									"pm.test(\"Status code is 200 OK \", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Response body as  string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if Content-Type=application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body has the fields [id, name, email, gender, status]\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"    pm.expect(pm.response.text()).to.include(\"email\");\r",
									"    pm.expect(pm.response.text()).to.include(\"gender\");\r",
									"    pm.expect(pm.response.text()).to.include(\"status\");\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"    type: \"array\",\r",
									"    items: {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    }\r",
									"};\r",
									"\r",
									"// Add a test to check if the schema is valid\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    var response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"var response = pm.response.json(); // Define response to fix the ReferenceError\r",
									"var actualSize = response.length; // Define actualSize to fix the ReferenceError\r",
									"console.log(\"Actual Size:\", actualSize);\r",
									"\r",
									"//Capturing the response code attribute \r",
									"console.log(\"The server response code is \"+ pm.response.code );\r",
									"console.log(\"The server response message received form server  is \"+ pm.response.status );\r",
									"console.log(\"Response time from Server \" + pm.response.responseTime + \"ms\" );\r",
									"console.log(pm.response.size());\r",
									"\r",
									"console.log(\"Response body received from Server: \", pm.response.json());\r",
									"\r",
									"console.log(\"The Response header received from server\" + pm.response.headers)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a398925ea095d2e175e04fbb1109b2fe56d7341d52bb82d8ee33271f96f46a0b"
							},
							{
								"key": "User-Agent",
								"value": "https://warped-astronaut-400034.postman.co/workspace/WhatsApp_Migration-64_UseCase~1de4e15a-b615-424d-8d33-255ea305a509/collection/18446898-b262869a-fedc-4c63-888a-2b586729306f?action=share&source=copy-link&creator=18446898",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for successful creation\r",
									"pm.test(\"Status code is 201 Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"// Verify response time is less than 1500ms\r",
									"pm.test(\"Response time is less than 1500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"// Verify Content-Type is application/json\r",
									"pm.test(\"Verify Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Validate response body contains required fields\r",
									"pm.test(\"Response body has required fields [id, name, email, gender, status]\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.all.keys(\"id\", \"name\", \"email\", \"gender\", \"status\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"pm.test(\"Schema is valid\", function () {\r",
									"    const schema = {\r",
									"        type: \"object\",\r",
									"        properties: {\r",
									"            id: { type: \"number\" },\r",
									"            name: { type: \"string\" },\r",
									"            email: { type: \"string\", format: \"email\" },\r",
									"            gender: { type: \"string\", enum: [\"male\", \"female\"] },\r",
									"            status: { type: \"string\", enum: [\"active\", \"inactive\"] }\r",
									"        },\r",
									"        required: [\"id\", \"name\", \"email\", \"gender\", \"status\"]\r",
									"    };\r",
									"\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});\r",
									"\r",
									"// Function to validate email format\r",
									"function validateEmail(email) {\r",
									"    pm.test(\"Email is in a proper format\", function () {\r",
									"        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Basic email regex\r",
									"        pm.expect(emailRegex.test(email)).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"// Function to validate gender field\r",
									"function checkGender(gender) {\r",
									"    pm.test(\"Gender field is Male or Female\", function () {\r",
									"        pm.expect(gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(\"Verify gender is male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify status is active or inactive\", function () {\r",
									"    pm.expect(pm.response.json().status).to.be.oneOf([\"active\", \"inactive\"]);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the body in JSON format\", function () {\r",
									"    pm.response.to.have.body;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a398925ea095d2e175e04fbb1109b2fe56d7341d52bb82d8ee33271f96f46a0b"
							},
							{
								"key": "User-Agent\n",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n        \"id\": 7077590,\r\n        \"name\": \"YRKJHthjj dRamakrishna\",\r\n        \"email\": \"j.ramajkrishna@15ce.com\",\r\n        \"gender\": \"female\",\r\n        \"status\": \"inactive\"\r\n    }\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 Created\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"\r",
									"\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the gender is male or female\", function () {\r",
									"    pm.expect(pm.response.json().gender).to.be.oneOf([\"male\", \"female\"]);\r",
									"    pm.expect(jsonData.name).to.eql(\"jivan\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the email iD\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.email).to.eql(\"jivan@postman.com\");\r",
									"});\r",
									"\r",
									"console.log(\"The HTTP method used in this API ->  \" + pm.request.method )\r",
									"console.log(\"The  URL used in this API \" + pm.request.url )\r",
									"console.log(\"The  json data received from server \" + pm.request.headers)\r",
									"console.log(\"The  request body received from server \" )\r",
									"console.log(pm.request.body)\r",
									"console.log(\"The API Name is \" + pm.info.requestName)\r",
									"\r",
									"\r",
									"pm.request.removeHeader (\"Token\");\r",
									"console.log(\"After removed the header response has below \" + pm.request.headers)\r",
									"\r",
									"\r",
									"\r",
									" \r",
									"\r",
									" \r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.request.headers.add({\r",
									"    key: \"Token\",\r",
									"    value: \"007\"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a398925ea095d2e175e04fbb1109b2fe56d7341d52bb82d8ee33271f96f46a0b"
							},
							{
								"key": "User-Agent\n",
								"value": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 7478896,\r\n    \"name\": \"jivan123\",\r\n    \"email\": \"jivan514@postman.com\",\r\n    \"gender\": \"female\",\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7478306",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7478306"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\")\r",
									"\r",
									"});\r",
									"\r",
									"// Additional assertions can be added based on your requirements\r",
									"pm.test(\"Email creation successful\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty; // Ensure there's no response content\r",
									"});\r",
									"\r",
									"pm.test(\"Verify if the response body is not received from Server\", function () {\r",
									"    pm.response.to.not.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\" Server Response time is less than 2000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer a398925ea095d2e175e04fbb1109b2fe56d7341d52bb82d8ee33271f96f46a0b"
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.6723.58 Mobile Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/7480550",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"7480550"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}